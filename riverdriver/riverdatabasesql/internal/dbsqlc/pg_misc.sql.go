// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pg_misc.sql

package dbsqlc

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const pGAdvisoryXactLock = `-- name: PGAdvisoryXactLock :exec
SELECT pg_advisory_xact_lock($1)
`

func (q *Queries) PGAdvisoryXactLock(ctx context.Context, db DBTX, key int64) error {
	_, err := db.ExecContext(ctx, pGAdvisoryXactLock, key)
	return err
}

const pGNotifyMany = `-- name: PGNotifyMany :exec
WITH topic_to_notify AS (
    SELECT
        concat(coalesce($1::text, current_schema()), '.', $2::text) AS topic,
        unnest($3::text[]) AS payload
)
SELECT pg_notify(
    topic_to_notify.topic,
    topic_to_notify.payload
  )
FROM topic_to_notify
`

type PGNotifyManyParams struct {
	Schema  sql.NullString
	Topic   string
	Payload []string
}

func (q *Queries) PGNotifyMany(ctx context.Context, db DBTX, arg *PGNotifyManyParams) error {
	_, err := db.ExecContext(ctx, pGNotifyMany, arg.Schema, arg.Topic, pq.Array(arg.Payload))
	return err
}
