// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: schema.sql

package dbsqlc

import (
	"context"
)

const schemaGetExpired = `-- name: SchemaGetExpired :many
SELECT schema_name::text
FROM information_schema.schemata
WHERE schema_name LIKE $1
    AND schema_name < $2
ORDER BY schema_name
`

type SchemaGetExpiredParams struct {
	Prefix     interface{}
	BeforeName interface{}
}

func (q *Queries) SchemaGetExpired(ctx context.Context, db DBTX, arg *SchemaGetExpiredParams) ([]string, error) {
	rows, err := db.QueryContext(ctx, schemaGetExpired, arg.Prefix, arg.BeforeName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var schema_name string
		if err := rows.Scan(&schema_name); err != nil {
			return nil, err
		}
		items = append(items, schema_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
